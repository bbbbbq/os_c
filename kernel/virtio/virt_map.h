#ifndef VIRT_MAP_H
#define VIRT_MAP_H
#include "stdint.h"
// VIRT_VIRTIO
#define VIRTIO_BASE_ADDR 0x10001000
#define VIRTIO_MAGIC_OFFSET 0x000
#define VIRTIO_VERSION_OFFSET 0x004
#define VIRTIO_DEVICE_ID_OFFSET 0x008
#define VIRTIO_VENDOR_ID_OFFSET 0x00C
#define VIRTIO_STATUS_OFFSET 0x070
#define VIRTIO_FEATURES_OFFSET 0x010
#define VIRTIO_FEATURES_OK_OFFSET 0x020

#define VIRTIO_MAGIC_ADDR (VIRTIO_BASE_ADDR + VIRTIO_MAGIC_OFFSET)
#define VIRTIO_VERSION_ADDR (VIRTIO_BASE_ADDR + VIRTIO_VERSION_OFFSET)
#define VIRTIO_DEVICE_ID_ADDR (VIRTIO_BASE_ADDR + VIRTIO_DEVICE_ID_OFFSET)
#define VIRTIO_VENDOR_ID_ADDR (VIRTIO_BASE_ADDR + VIRTIO_VENDOR_ID_OFFSET)
#define VIRTIO_STATUS_ADDR (VIRTIO_BASE_ADDR + VIRTIO_STATUS_OFFSET)
#define VIRTIO_FEATURES_ADDR (VIRTIO_BASE_ADDR + VIRTIO_FEATURES_OFFSET)
#define VIRTIO_FEATURES_OK_ADDR (VIRTIO_BASE_ADDR + VIRTIO_FEATURES_OK_OFFSET)
// 状态寄存器的位定义
#define VIRTIO_STATUS_ACKNOWLEDGE 1
#define VIRTIO_STATUS_DRIVER 2
#define VIRTIO_STATUS_FEATURES_OK 8
#define VIRTIO_STATUS_RESET 0

#define R(r) ((volatile uint32_t *)(VIRTIO_BASE_ADDR + (r)))

static void write_addr(uint32_t offset, uint32_t value)
{
    volatile uint32_t *addr = (volatile uint32_t *)(VIRTIO_BASE_ADDR + offset);
    *addr = value;
}
static uint32_t read_addr(uint32_t offset)
{
    volatile uint32_t *addr = (volatile uint32_t *)(VIRTIO_BASE_ADDR + offset);
    return *addr;
}

#endif